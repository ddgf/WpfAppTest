trigger:
  branches:
    include:
      - '*'

variables:
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/clickonce'
  wcfFramework: 'net40'
  wpfFramework: 'net452'
  iis_server: 10.2.0.5
  iis_folder: 'D:\webpage'
  wcfAppName: 'wcfapp'
  wpfAppName: 'wpfapp'

stages:
- stage: Build_and_Publish
  displayName: Build & Publish
  pool:
    vmImage: 'windows-2019'
  jobs:
  - job: Build_and_Publish_Job
    displayName: Build and Publish Job
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '**/*.sln'

    - task: VSBuild@1
      displayName: 'Build WCF Project'
      inputs:
        solution: 'WcfWeb/WcfWeb.csproj'
        vsVersion: 'latest'
        msbuildArgs: '/p:Configuration=$(buildConfiguration) /p:TargetFramework=$(wcfFramework) /p:OutDir=$(Build.ArtifactStagingDirectory)\WcfWeb\\'

    # - task: VSBuild@1
    #   displayName: 'Build WPF Project'
    #   inputs:
    #     solution: 'WpfApp/WpfApp.csproj'
    #     vsVersion: 'latest'
    #     msbuildArgs: '/p:Configuration=$(buildConfiguration) /p:TargetFramework=$(wpfFramework) /p:OutDir=$(Build.ArtifactStagingDirectory)\WpfApp\\'

    - task: VSBuild@1
      displayName: 'Build WPF App'
      inputs:
        solution: 'WpfApp/WpfApp.csproj'
        vsVersion: 'latest'
        msbuildArgs: '/p:Configuration=$(buildConfiguration) /p:OutDir=$(publishDir) /p:PublishProfile=ClickOnceProfile.pubxml'
        configuration: '$(buildConfiguration)'

    - script: |
        echo "Contents of publish directory:"
        dir "$(publishDir)" /s
      displayName: 'List contents of publish directory'

    - task: CopyFiles@2
      displayName: 'Copy ClickOnce files to artifact staging directory'
      inputs:
        SourceFolder: '$(publishDir)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/ClickOnce'        

    - task: PublishPipelineArtifact@1
      displayName: 'Publish ClickOnce Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/ClickOnce'
        ArtifactName: 'ClickOnceDeployment'
        publishLocation: 'Container'

    - task: UniversalPackages@0
      displayName: 'Publish ClickOnce Artifact to feed'
      inputs:
        command: 'publish'
        publishDirectory: '$(publishDir)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: 'mainorg'
        vstsFeedPackagePublish: 'clickonce'
        packagePublishDescription: 'WPF ClickOnce Build Artifacts'
        versionOption: 'patch'
        publishedPackageVar: 'clickOncePublishedPackageVar'

    - task: UniversalPackages@0
      displayName: 'Publish WCF Artifact to feed'
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)\WcfWeb'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: 'mainorg'
        vstsFeedPackagePublish: '$(wcfAppName)'
        packagePublishDescription: 'WCF Project Build Artifacts'
        versionOption: 'patch'
        publishedPackageVar: 'wcfpublishedPackageVar'

    # - powershell: |
    #     $variable = "$(wcfpublishedPackageVar)"  # La variable original con el valor 'wcfapp 0.0.30'
    #     $part1, $version = $variable -split ' ' # Dividir el valor por el espacio
    #     echo "$version"
    #     # echo "##vso[task.setvariable variable=wcfAppVersion;isOutput=true]$version"
    #     echo "$version" | Out-File "$(Pipeline.Workspace)\wcfAppVersion.txt"
    #   displayName: 'Get WCF published version'

    # - script: |
    #     echo "$(Pipeline.Workspace)"
    #     ls -lh "$(Pipeline.Workspace)"
    #     cat "$(Pipeline.Workspace)/wcfAppVersion.txt"
    #   displayName: "Display file"

    # - task: PublishPipelineArtifact@1
    #   displayName: 'Publish WCF Artifacts'
    #   inputs:
    #     targetPath: '$(Pipeline.Workspace)/wcfAppVersion.txt'
    #     artifactName: 'wcfAppVersion'
    #     publishLocation: 'pipeline'

# - stage: Deploy_to_Testing
#   displayName: Deploy to Testing
#   pool:
#     vmImage: 'ubuntu-latest'
#   trigger: manual
#   jobs:
#   - job: DeployJob
#     steps:
#     - task: DownloadPipelineArtifact@1
#       displayName: 'Download WCF Version'
#       inputs:
#         buildType: 'current'
#         artifactName: 'wcfAppVersion'
#         targetPath: '$(Pipeline.Workspace)'

#     - script: |
#         wcfAppVersion=$(cat "$(Pipeline.Workspace)/wcfAppVersion.txt" | cut -c 3-)
#         echo "The value of wcfAppVersion is $wcfAppVersion"
#         echo "##vso[task.setvariable variable=wcfAppVersion;isOutput=true]$wcfAppVersion"
#       name: SetVersion
#       displayName: "Read version from file"

#     - script: |
#         if [ -z "$(SetVersion.wcfAppVersion)" ]; then
#           echo "Error: wcfAppVersion is not set!"
#           exit 1
#         else
#           echo "The value of wcfAppVersion is $(SetVersion.wcfAppVersion)"
#         fi
#       displayName: "Use wcfAppVersion"

#     - script: |
#         if [ -z "$(wcfAppName)" ]; then
#           echo "Error: wcfAppName is not set!"
#           exit 1
#         else
#           echo "The value of wcfAppName is $(wcfAppName)"
#         fi
#       displayName: "Use wcfAppName" 

#     - script: |
#         jsonData=$(cat <<EOF
#         {
#           "stagesToSkip": [],
#           "resources": {
#             "repositories": {
#               "self": {
#                 "refName": "refs/heads/main"
#               }
#             }
#           },
#           "templateParameters": {
#             "feedPackage": "$(wcfAppName)",
#             "packageVersion": "$(SetVersion.wcfAppVersion)"
#           }
#         }
#         EOF)
#         echo "Sending the following JSON data: $jsonData"
#         curl -X POST \
#         --location 'https://dev.azure.com/gleyva/test-pivot/_apis/pipelines/18/runs?api-version=7.1' \
#         --header "Content-Type: application/json" \
#         --header "Authorization: Basic VVNFUjo0emwzdmk1eDN6cWpsNTV2NnhlbHN2N3RhZWxleGV4cXdnbWZrMnJkdW42ZHhreXQzZXlx" \
#         --data "$jsonData"
#       displayName: 'Trigger pipeline using REST API'
